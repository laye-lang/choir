---
## C, latest standard.
Language: Cpp
Standard: Latest

## If a function decl or call's opening paren is at the end of a line,
## format its arguments like so:
##
##     int foo(
##         int a,
##         int b
##     );
##
AlignAfterOpenBracket: BlockIndent

## Don’t align arrays or initialiser lists.
AlignArrayOfStructures: None

## Don’t align assignments because that leads to too much extra whitespace.
AlignConsecutiveAssignments: None

## So is aligning bitfields.
AlignConsecutiveBitFields: Consecutive

## Same as declarations: nope.
AlignConsecutiveDeclarations: None

## Aligning macros is usually fine tho.
AlignConsecutiveMacros: Consecutive

## Escaped newlines in macros should be aligned like so:
##
##   #define foo(x)  \
##       do {        \
##           bar(x); \
##           baz(x); \
##       } while (0)
AlignEscapedNewlines: Left

## Align operands of binary expressions like so:
##
##     int a = 1 + 2 + 3 + 4
##           + 5 + 6 + 7 + 8
##           + 9 + 10;
##
## Note: BreakBeforeBinaryOperators also needs to be set appropriately.
AlignOperands: AlignAfterOperator

## This option also allows you to define across how many empty
## lines comments should be aligned, but I don’t want that so
## I just use a bool here.
##
## This aligns comments like so:
##
##     int bar = 42;               /// Comment.
##     std::string foobarbaz = ""; /// Another comment.
AlignTrailingComments: true

## Don’t allow this:
##
##     foobarbaz(
##         a, b, c, d);
##
## Instead, BinPackArguments will format it like so:
##
##     foobarbaz(
##         a,
##         b,
##         c,
##         d
##     );
AllowAllArgumentsOnNextLine: false
AllowAllParametersOfDeclarationOnNextLine: false

## Allow these:
##
##     for (;;) { foo(); }
##
##     case 1: foo(); break;
##
##     enum { A, B };
##
##     int foo() { bar(); }
##
##     if (foo()) bar();
##     else baz();
##
##     auto lambda []() { return 0; }
##
##     for (;;) foo();
AllowShortBlocksOnASingleLine: Always
AllowShortCaseLabelsOnASingleLine: true
AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: All
AllowShortIfStatementsOnASingleLine: AllIfsAndElse
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: true

## Don’t do this horribleness, ever:
##
##     int
##     foo() { ...
AlwaysBreakAfterReturnType: None

## Break before multiline strings like so:
##
##     auto s =
##         "This is a "
##         "multiline string.";
AlwaysBreakBeforeMultilineStrings: true

## Identifiers that should be interpreted as attributes.
AttributeMacros: ['__forceinline']

## Function parameters are either all on the same line,
## or all on separate lines.
BinPackArguments: false
BinPackParameters: false

## Space before and after the ':' in bitfields.
BitFieldColonSpacing: Both

## Leave line breaks around attributes alone.
BreakAfterAttributes: Leave

## Break *after*, and not before operators.
BreakBeforeBinaryOperators: None

## NEVER put opening braces on a new line.
BreakBeforeBraces: Attach

## Format ternaries like so:
##
##     auto foo = bar
##         ? baz
##         : qux;
BreakBeforeTernaryOperators: true

## Allow breaking long string literals across multiple lines.
BreakStringLiterals: true

## This disables the column limit. Rather unintuitively, this is
## also the only way to get clang-format to not remove all manually
## inserted line breaks.
ColumnLimit: 0

## Do NOT attempt to infer pointer alignment. Format it to what I want
## it to be.
DerivePointerAlignment: false

## Duh.
DisableFormat: false

## Macros that should be formatted like the `for` keyword.
ForEachMacros: ['arr_foreach', 'arr_foreach_ptr', 'lca_da_foreach', 'lca_da_foreach_ptr']

## Same thing, but for `if`.
IfMacros: []

## Merge include blocks, sort them, and resplit.
IncludeBlocks: Regroup

## Don’t indent case blocks. Note, this is not about case *labels*,
## but the actual blocks of code. The labels *will* be indented, so
## we don’t need any extra indentation here.
IndentCaseBlocks: false

## Indent `case foo:` relative to the `switch`. We do this is because,
## otherwise, we can end up w/ two `}` on the same line like so:
##
##     switch (foo) {
##     case 1: {
##         bar();
##         break;
##     }
##     }
IndentCaseLabels: true

## We want goto labels to be indented relative to the current scope.
IndentGotoLabels: true

## Indent CPP directives after the `#` sign.
IndentPPDirectives: AfterHash

## Four spaces. This is the only correct value.
IndentWidth: 4

## This should never happen anyway, but just in case, don’t.
IndentWrappedFunctionNames: false

## This would do the opposite of what I have spent far too much
## time to fix manually.
InsertBraces: false

## I keep forgetting about this, and I’d prefer to be consistent
## about it, so, therefore:
InsertNewlineAtEOF: true

## Format integer literals:
#IntegerLiteralSeparator:
#  Binary: 4
#  Decimal: 3
#  Hex: 4

## This one is pretty self-explanatory.
KeepEmptyLinesAtTheStartOfBlocks: false

## Use LF, never CRLF.
LineEnding: LF

## Don’t allow multiple consecutive empty lines.
MaxEmptyLinesToKeep: 1

## Reuse IndentWidth.
PPIndentWidth: -1

## We don’t want this to happen. Ever.
PenaltyReturnTypeOnItsOwnLine: 4294967295

## Where to place the pointer character in a declaration.
PointerAlignment: Left

## Leave qualifiers where they are as the docs state that this option
## may lead to incorrect code.
QualifierAlignment: Leave

## Should always be left.
ReferenceAlignment: Left

## Allow reflowing comments. Not sure if this does anything since we’ve disabled the col limit.
ReflowComments: true

## I know better when to separate stuff than clang-format.
SeparateDefinitionBlocks: Leave

## Sort include directives.
SortIncludes: CaseInsensitive

## Space after C-style cast.
SpaceAfterCStyleCast: false

## No space after `!`.
SpaceAfterLogicalNot: false

## Ignore this option and use PointerAlignment instead.
SpaceAroundPointerQualifiers: Default

## Put spaces around `=` and friends.
SpaceBeforeAssignmentOperators: true

## We *definitely* don’t want spaces before a case colon.
SpaceBeforeCaseColon: false

## Spaces before parens:
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDeclarationName: false
  AfterFunctionDefinitionName: false
  AfterIfMacros: true
  BeforeNonEmptyParentheses: false

## No space before subscripts.
SpaceBeforeSquareBrackets: false

## Empty block should be {}, not { }.
SpaceInEmptyBlock: false

## Same thing for parens.
SpaceInEmptyParentheses: false

## At least one space before trailing comments.
SpacesBeforeTrailingComments: 1

## We definitely don’t want this.
SpacesInCStyleCastParentheses: false

## Or this.
SpacesInConditionalStatement: false

## Spaces at the beginning of line comments.
## Minimum: At least one.
## Maximum: More are allowed.
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1

## Disable this too.
SpacesInParentheses: false

## And this.
SpacesInSquareBrackets: false

## Currently not used, but it’s here for future reference.
StatementAttributeLikeMacros: []

## Macros that should be treated as statements.
StatementMacros: []

## Tabs are four columns.
TabWidth: 4

## Macros that create type names.
TypenameMacros: []

## NEVER use tabs. They only cause problems.
UseTab: Never

## Some macros care about whitespace.
WhitespaceSensitiveMacros: []

...
