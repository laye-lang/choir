static assert sizeof(source_location) == sizeof(i64);
struct source_location {
    i32 offset;
    i16 length;
    i16 file_id;
}

static assert sizeof(source_range) == 2 * sizeof(i64);
struct source_range {
    source_location begin;
    source_location end;
}

enum token_kind {
    invalid,
    end_of_file,
}

struct syntax_node {
    source_range range;

    variant token {
        token_kind kind;
    }
}

struct translation_unit {
    // store nodes
    list<syntax_node mut*> owned_syntax_nodes;
}

i8 mut* operator new(int size) {
    return libc::malloc(size);
}

syntax_node mut* operator new(int size, translation_unit mut& tu) {
    var ptr = cast(syntax_node mut*) ::operator new(size);
    list_add(tu.owned_syntax_nodes, ptr);
    return ptr;
}

void main() {
    translation_unit tu;
    syntax_node* foo = new (&tu) syntax_node;
}
