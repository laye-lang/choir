#ifndef CC_TOKEN
#    define CC_TOKEN(Name)
#endif // CC_TOKEN

#ifndef CC_TOKEN_KW
#    define CC_TOKEN_KW(Name, Text, Feats) CC_TOKEN(KW_##Name)
#endif // CC_TOKEN_KW

#ifndef CC_TOKEN_CPP
#    define CC_TOKEN_CPP(Name, Text, Feats) CC_TOKEN(CPP_##Name)
#endif // CC_TOKEN_CPP

CC_TOKEN(EOF)
CC_TOKEN(IDENT)
CC_TOKEN(LITERAL_CHAR)
CC_TOKEN(LITERAL_STRING)
CC_TOKEN(LITERAL_INTEGER)
CC_TOKEN(CPP_NUMBER)
CC_TOKEN(OPEN_BRACKET)
CC_TOKEN(CLOSE_BRACKET)
CC_TOKEN(OPEN_PAREN)
CC_TOKEN(CLOSE_PAREN)
CC_TOKEN(OPEN_BRACE)
CC_TOKEN(CLOSE_BRACE)
CC_TOKEN(PLUS)
CC_TOKEN(PLUS_PLUS)
CC_TOKEN(PLUS_EQUAL)
CC_TOKEN(MINUS)
CC_TOKEN(MINUS_MINUS)
CC_TOKEN(MINUS_EQUAL)
CC_TOKEN(MINUS_GREATER)
CC_TOKEN(STAR)
CC_TOKEN(STAR_EQUAL)
CC_TOKEN(SLASH)
CC_TOKEN(SLASH_EQUAL)
CC_TOKEN(PERCENT)
CC_TOKEN(PERCENT_EQUAL)
CC_TOKEN(AMPERSAND)
CC_TOKEN(AMPERSAND_AMPERSAND)
CC_TOKEN(AMPERSAND_EQUAL)
CC_TOKEN(PIPE)
CC_TOKEN(PIPE_PIPE)
CC_TOKEN(PIPE_EQUAL)
CC_TOKEN(CARET)
CC_TOKEN(CARET_EQUAL)
CC_TOKEN(TILDE)
CC_TOKEN(TILDE_EQUAL)
CC_TOKEN(EQUAL)
CC_TOKEN(EQUAL_EQUAL)
CC_TOKEN(BANG)
CC_TOKEN(BANG_EQUAL)
CC_TOKEN(LESS)
CC_TOKEN(LESS_LESS)
CC_TOKEN(LESS_EQUAL)
CC_TOKEN(LESS_LESS_EQUAL)
CC_TOKEN(GREATER)
CC_TOKEN(GREATER_GREATER)
CC_TOKEN(GREATER_EQUAL)
CC_TOKEN(GREATER_GREATER_EQUAL)
CC_TOKEN(DOT)
CC_TOKEN(DOT_DOT_DOT)
CC_TOKEN(COMMA)
CC_TOKEN(SEMICOLON)
CC_TOKEN(QUESTION)
CC_TOKEN(COLON)
CC_TOKEN(HASH)
CC_TOKEN(HASH_HASH)
/* C89 */
CC_TOKEN_KW(AUTO, "auto", CC_FEAT_NONE)
CC_TOKEN_KW(BREAK, "break", CC_FEAT_NONE)
CC_TOKEN_KW(CASE, "case", CC_FEAT_NONE)
CC_TOKEN_KW(CHAR, "char", CC_FEAT_NONE)
CC_TOKEN_KW(CONST, "const", CC_FEAT_NONE)
CC_TOKEN_KW(CONTINUE, "continue", CC_FEAT_NONE)
CC_TOKEN_KW(DEFAULT, "default", CC_FEAT_NONE)
CC_TOKEN_KW(DO, "do", CC_FEAT_NONE)
CC_TOKEN_KW(DOUBLE, "double", CC_FEAT_NONE)
CC_TOKEN_KW(ELSE, "else", CC_FEAT_NONE)
CC_TOKEN_KW(ENUM, "enum", CC_FEAT_NONE)
CC_TOKEN_KW(EXTERN, "extern", CC_FEAT_NONE)
CC_TOKEN_KW(FLOAT, "float", CC_FEAT_NONE)
CC_TOKEN_KW(FOR, "for", CC_FEAT_NONE)
CC_TOKEN_KW(GOTO, "goto", CC_FEAT_NONE)
CC_TOKEN_KW(IF, "if", CC_FEAT_NONE)
CC_TOKEN_KW(INT, "int", CC_FEAT_NONE)
CC_TOKEN_KW(LONG, "long", CC_FEAT_NONE)
CC_TOKEN_KW(REGISTER, "register", CC_FEAT_NONE)
CC_TOKEN_KW(RETURN, "return", CC_FEAT_NONE)
CC_TOKEN_KW(SHORT, "short", CC_FEAT_NONE)
CC_TOKEN_KW(SIGNED, "signed", CC_FEAT_NONE)
CC_TOKEN_KW(SIZEOF, "sizeof", CC_FEAT_NONE)
CC_TOKEN_KW(STATIC, "static", CC_FEAT_NONE)
CC_TOKEN_KW(STRUCT, "struct", CC_FEAT_NONE)
CC_TOKEN_KW(SWITCH, "switch", CC_FEAT_NONE)
CC_TOKEN_KW(TYPEDEF, "typedef", CC_FEAT_NONE)
CC_TOKEN_KW(UNION, "union", CC_FEAT_NONE)
CC_TOKEN_KW(UNSIGNED, "unsigned", CC_FEAT_NONE)
CC_TOKEN_KW(VOID, "void", CC_FEAT_NONE)
CC_TOKEN_KW(VOLATILE, "volatile", CC_FEAT_NONE)
CC_TOKEN_KW(WHILE, "while", CC_FEAT_NONE)
CC_TOKEN_CPP(IF, "if", CC_FEAT_NONE)
CC_TOKEN_CPP(ELIF, "elif", CC_FEAT_NONE)
CC_TOKEN_CPP(ELSE, "else", CC_FEAT_NONE)
CC_TOKEN_CPP(ENDIF, "endif", CC_FEAT_NONE)
CC_TOKEN_CPP(IFDEF, "ifdef", CC_FEAT_NONE)
CC_TOKEN_CPP(IFNDEF, "ifndef", CC_FEAT_NONE)
CC_TOKEN_CPP(DEFINE, "define", CC_FEAT_NONE)
CC_TOKEN_CPP(UNDEF, "undef", CC_FEAT_NONE)
CC_TOKEN_CPP(INCLUDE, "include", CC_FEAT_NONE)
CC_TOKEN_CPP(LINE, "line", CC_FEAT_NONE)
CC_TOKEN_CPP(ERROR, "error", CC_FEAT_NONE)
CC_TOKEN_CPP(PRAGMA, "pragma", CC_FEAT_NONE)
CC_TOKEN_CPP(DEFINED, "defined", CC_FEAT_NONE)
/* C99 */
CC_TOKEN_KW(INLINE, "inline", CC_FEAT_C99)
CC_TOKEN_KW(RESTRICT, "restrict", CC_FEAT_C99)
CC_TOKEN_KW(_BOOL, "_Bool", CC_FEAT_C99)
CC_TOKEN_KW(_COMPLEX, "_Complex", CC_FEAT_C99)
CC_TOKEN_KW(_IMAGINARY, "_Imaginary", CC_FEAT_C99)
CC_TOKEN_CPP(_PRAGMA, "_pragma", CC_FEAT_C99)
/* C11 */
CC_TOKEN_KW(_ALIGNAS, "_Alignas", CC_FEAT_C11)
CC_TOKEN_KW(_ALIGNOF, "_Alignof", CC_FEAT_C11)
CC_TOKEN_KW(_ATOMIC, "_Atomic", CC_FEAT_C11)
CC_TOKEN_KW(_GENERIC, "_Generic", CC_FEAT_C11)
CC_TOKEN_KW(_NORETURN, "_Noreturn", CC_FEAT_C11)
CC_TOKEN_KW(_STATIC_ASSERT, "_Static_assert", CC_FEAT_C11)
CC_TOKEN_KW(_THREAD_LOCAL, "_Thread_local", CC_FEAT_C11)
/* C23 */
CC_TOKEN_KW(ALIGNAS, "alignas", CC_FEAT_C23)
CC_TOKEN_KW(ALIGNOF, "alignof", CC_FEAT_C23)
CC_TOKEN_KW(BOOL, "bool", CC_FEAT_C23)
CC_TOKEN_KW(CONSTEXPR, "constexpr", CC_FEAT_C23)
CC_TOKEN_KW(FALSE, "false", CC_FEAT_C23)
CC_TOKEN_KW(NULLPTR, "nullptr", CC_FEAT_C23)
CC_TOKEN_KW(STATIC_ASSERT, "static_assert", CC_FEAT_C23)
CC_TOKEN_KW(THREAD_LOCAL, "thread_local", CC_FEAT_C23)
CC_TOKEN_KW(TRUE, "true", CC_FEAT_C23)
CC_TOKEN_KW(TYPEOF, "typeof", CC_FEAT_C23)
CC_TOKEN_KW(TYPEOF_UNQUAL, "typeof_unqual", CC_FEAT_C23)
CC_TOKEN_KW(_BITINT, "_BitInt", CC_FEAT_C23)
CC_TOKEN_KW(_DECIMAL128, "_Decimal128", CC_FEAT_C23)
CC_TOKEN_KW(_DECIMAL32, "_Decimal32", CC_FEAT_C23)
CC_TOKEN_KW(_DECIMAL64, "_Decimal64", CC_FEAT_C23)
CC_TOKEN_CPP(ELIFDEF, "elifdef", CC_FEAT_C23)
CC_TOKEN_CPP(ELIFNDEF, "elifndef", CC_FEAT_C23)
CC_TOKEN_CPP(EMBED, "embed", CC_FEAT_C23)
CC_TOKEN_CPP(WARNING, "warning", CC_FEAT_C23)
CC_TOKEN_CPP(__HAS_INCLUDE, "__has_include", CC_FEAT_C23)
CC_TOKEN_CPP(__HAS_EMBED, "__has_embed", CC_FEAT_C23)
CC_TOKEN_CPP(__HAS_C_ATTRIBUTE, "__has_c_attribute", CC_FEAT_C23)
/* STD EXTENSIONS */
CC_TOKEN_KW(ASM, "asm", ~CC_FEAT_C11)
CC_TOKEN_KW(__ASM, "__asm", CC_FEAT_MSVC)
CC_TOKEN_KW(__ASM__, "__asm__", CC_FEAT_C11)

#undef CC_TOKEN
#undef CC_TOKEN_KW
#undef CC_TOKEN_CPP
